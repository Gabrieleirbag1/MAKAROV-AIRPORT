services:

###### API REST ########
  web-rest-1:
    build:
      context: django-compose-user/app
      target: builder
    ports:
      - '8000:8000'
      - '81:80'
      - '444:443'
    networks:
      - bridge_network

  web-rest-2:
    build:
      context: django-compose-vols/app
      target: builder
    ports:
      - '8001:8000'
      - '82:80'
      - '445:443'
    networks:
      - bridge_network

  web-rest-3:
    build:
      context: django-compose-reservations/app
      target: builder
    ports:
      - '8002:8000'
      - '83:80'
      - '446:443'
    networks:
      - bridge_network

  web-rest-4:
    build:
      context: django-compose-structure/app
      target: builder
    ports:
      - '8003:8000'
      - '84:80'
      - '447:443'
    networks:
      - bridge_network
############################


##### DATABASE #####
  db:
    image: mariadb
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: mydatabase
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    volumes:
      - db-data:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - bridge_network
####################



##### NATS CLUSTER #####
  nats:
    image: nats
    ports:
      - "8222:8222"
    command: "--cluster_name NATS --cluster nats://0.0.0.0:6222 --http_port 8222 "
    networks:
      - bridge_network

  nats-1:
    image: nats
    command: "--cluster_name NATS --cluster nats://0.0.0.0:6222 --routes=nats://ruser:T0pS3cr3t@nats:6222"
    networks:
      - bridge_network
    depends_on:
      - bridge_networks

  nats-2:
    image: nats
    command: "--cluster_name NATS --cluster nats://0.0.0.0:6222 --routes=nats://ruser:T0pS3cr3t@nats:6222"
    networks:
      - bridge_network
    depends_on:
      - bridge_networks

########################


##### PYTHON MICROSERVICES #####
  micro1:
    build:
      dockerfile: microservices-compose/Dockerfile
      target: micropy
    networks:
      - bridge_network
    command: python3 script1.py

  micro2:
    build:
      dockerfile: microservices-compose/Dockerfile
      target: micropy
    networks:
      - bridge_network
    command: python3 script2.py

  micro3:
    build:
      dockerfile: microservices-compose/Dockerfile
      target: micropy
    networks:
      - bridge_network
    command: python3 script3.py
################################

##### FRONT DJANGO ######
  djangopache:
    build:
      dockerfile: djangopache-compose/Dockerfile
    networks:
      - bridge_network
#########################

networks:
  bridge_network:
    driver: bridge

volumes:
  db-data:
    name: "maria-data"

